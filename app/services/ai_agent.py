import openai
from typing import Dict, Optional
from app.config import settings
import logging
logger = logging.getLogger(__name__)
class WhatsAppAIAgent:
def __init__(self):
openai.api_key = settings.OPENAI_API_KEY
self.conversation_templates = {
"initial": """Ol√° {customer_name}, tudo bem?\n\nüòä\n\nNotamos que voc√™ deixou um item no carrinho em nossa loja:\n\nüß∫ Produto: {product_name}\nüí∞ Valor: R$ {product_price:.2f}\nüì¶ Quantidade: {quantity}\nüëá\n\nEsse item ainda est√° dispon√≠vel, e podemos reservar para voc√™ por tempo limitado.\nFinalize seu pedido agora e garanta seu produto antes que acabe!\n\nüîó Finalizar compra: {checkout_url}\nPosso te ajudar com alguma d√∫vida?""",
"follow_up": """Oi {customer_name}!\n\nüòä\n\nVi que voc√™ ainda n√£o finalizou sua compra do produto: {product_name}\nPosso te ajudar com alguma d√∫vida? Estou aqui para esclarecer qualquer coisa sobre:\n‚Ä¢ Forma de pagamento\n‚Ä¢ Prazo de entrega\n‚Ä¢ Caracter√≠sticas do produto\nSe precisar de qualquer informa√ß√£o, √© s√≥ me chamar!\n"discount": """Ol√° {customer_name}!\n\nüéâ\n\nüí¨""",\n\nTenho uma oferta especial para voc√™:\n**10% OFF** no seu carrinho!\n\nüß∫ Produto: {product_name}\nüí∞ Valor original: R$ {product_price:.2f}\nüéØ Valor com desconto: R$ {discounted_price:.2f}\nUse o c√≥digo: VOLTA10\nV√°lido por apenas 2 horas!\n\n‚è∞\n\nüîó Finalizar com desconto: {checkout_url}?discount=VOLTA10"""
}

def generate_template_message(self, message_type: str, cart_data: Dict) -> str:
"""Generate message from template"""
template = self.conversation_templates.get(message_type, "")
if message_type == "discount":
cart_data["discounted_price"] = cart_data["product_price"] * 0.9
return template.format(**cart_data)
def generate_contextual_response(self, customer_message: str, cart_context: Dict) -> str:
"""Generate AI response based on customer message and cart context"""
try:
system_prompt = f"""Voc√™ √© um atendente virtual gentil e emp√°tico de uma loja online\nbrasileira especializada em produtos pl√°sticos e utens√≠lios dom√©sticos.\nContexto do carrinho abandonado:\n- Cliente: {cart_context.get("customer_name", "Cliente")}\n- Produto: {cart_context.get("product_name", "Produto")}\n- Valor: R$ {cart_context.get("product_price", 0):.2f}\n- Quantidade: {cart_context.get("quantity", 1)}\nDiretrizes:\n1. Responda sempre em portugu√™s brasileiro\n2. Seja gentil, emp√°tico e natural\n3. Foque em converter a venda sem ser insistente\n4. Use emojis quando apropriado\n5. Ofere√ßa ajuda para obje√ß√µes comuns (pre√ßo, frete, d√∫vidas)\n6. Se o cliente demonstrar interesse, forne√ßa o link: {cart_context.get("checkout_url", "")}\n7. Mantenha respostas concisas (m√°ximo 3 linhas)\nMensagem do cliente: "{customer_message}"\nResponda como um atendente humano responderia:"""
response = openai.ChatCompletion.create(
model="gpt-3.5-turbo",
messages=[
{"role": "system", "content": system_prompt},\n{"role": "user", "content": customer_message}\n],
max_tokens=150,
temperature=0.7
)
ai_response = response.choices[0].message.content.strip()
logger.info(f"AI response generated successfully")
return ai_response
except Exception as e:
logger.error(f"Error generating AI response: {e}")
return "Desculpe, estou com dificuldades t√©cnicas no momento. Voc√™ pode finalizar\nsua compra atrav√©s do link que enviei anteriormente. Se precisar de ajuda, entre em contato\nconosco!"
def analyze_message_intent(self, message: str) -> str:
"""Analyze customer message to determine intent"""
message_lower = message.lower()
# Simple intent classification\nif any(word in message_lower for word in ["sim", "ok", "quero", "vou comprar",\n"finalizar"]):\nreturn "positive"\nelif any(word in message_lower for word in ["n√£o", "nao", "depois", "mais tarde"]):\nreturn "negative"\nelif any(word in message_lower for word in ["frete", "entrega", "prazo"]):\nreturn "shipping_question"\nelif any(word in message_lower for word in ["pre√ßo", "preco", "valor", "desconto"]):\nreturn "price_question"\nelif any(word in message_lower for word in ["produto", "qualidade", "tamanho"]):\nreturn "product_question"\nelse:\nreturn "general"

